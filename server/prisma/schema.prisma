generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Agent {
  id                              String    @id @default(auto()) @map("_id") @db.ObjectId
  name                            String
  email                           String    @unique
  password                        String
  approved                        Boolean   @default(false)
  isEmailVerified                 Boolean   @default(false)
  refreshToken                    String?
  forgotPasswordToken             String?
  forgotPasswordTokenExpiresAt    DateTime?
  emailVerificationToken          String?
  emailVerificationTokenExpiresAt DateTime?
  createdAt                       DateTime  @default(now())
  tours                           Tour[]
}

model User {
  id                              String    @id @default(auto()) @map("_id") @db.ObjectId
  name                            String
  email                           String    @unique
  password                        String
  role                            Role      @default(USER)
  isEmailVerified                 Boolean   @default(false)
  refreshToken                    String?
  forgotPasswordToken             String?
  forgotPasswordTokenExpiresAt    DateTime?
  emailVerificationToken          String?
  emailVerificationTokenExpiresAt DateTime?
  createdAt                       DateTime  @default(now())
  bookings                        Booking[]
}

model Tour {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  description   String
  price         Float
  comparePrice  Float
  // city          String
  state         String
  country       String
  itinerary     Json
  tags          String[]
  duration      String?
  departureDate String?
  groupSize     String?
  status        Status    @default(DRAFT)
  isFeatured    Boolean   @default(false)
  images        String[]
  agentId       String    @db.ObjectId
  agent         Agent     @relation(fields: [agentId], references: [id])
  bookings      Booking[]
  createdAt     DateTime  @default(now())
}

model Booking {
  id              String          @id @default(auto()) @map("_id") @db.ObjectId
  userId          String          @db.ObjectId
  tourId          String          @db.ObjectId
  personDetails   PersonDetails[]
  bookingDate     DateTime
  status          BookingStatus   @default(PENDING)
  paymentStatus   PaymentStatus   @default(UNPAID)
  specialRequests String?
  totalCost       Float
  user            User            @relation(fields: [userId], references: [id])
  tour            Tour            @relation(fields: [tourId], references: [id])
}

type PersonDetails {
  fullName    String
  age         Int
  gender      Gender // Enum for gender
  email       String
  phoneNumber String
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum Role {
  ADMIN
  USER
}

enum Status {
  DRAFT
  ACTIVE
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
}

enum PaymentStatus {
  UNPAID
  PAID
  REFUNDED
}
